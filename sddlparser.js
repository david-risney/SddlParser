/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function(root) {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { sddl: peg$parsesddl },
        peg$startRuleFunction  = peg$parsesddl,

        peg$c0 = "O:",
        peg$c1 = peg$literalExpectation("O:", false),
        peg$c2 = function(sid) { return "Owner: " + sid; },
        peg$c3 = "G:",
        peg$c4 = peg$literalExpectation("G:", false),
        peg$c5 = function(sid) { return "Group: " + sid; },
        peg$c6 = "D:",
        peg$c7 = peg$literalExpectation("D:", false),
        peg$c8 = function(flags, aces) { return "DACL " + flags + " \n" + aces; },
        peg$c9 = "S:",
        peg$c10 = peg$literalExpectation("S:", false),
        peg$c11 = function(flags, aces) { return "SACL " + flags + " \n" + aces; },
        peg$c12 = "DA",
        peg$c13 = peg$literalExpectation("DA", false),
        peg$c14 = function() { return "Domain admins"; },
        peg$c15 = "DG",
        peg$c16 = peg$literalExpectation("DG", false),
        peg$c17 = function() { return "Domain guests"; },
        peg$c18 = "DU",
        peg$c19 = peg$literalExpectation("DU", false),
        peg$c20 = function() { return "Domain users"; },
        peg$c21 = "ED",
        peg$c22 = peg$literalExpectation("ED", false),
        peg$c23 = function() { return "Enterprise domain controllers"; },
        peg$c24 = "DD",
        peg$c25 = peg$literalExpectation("DD", false),
        peg$c26 = function() { return "Domain domain controllers"; },
        peg$c27 = "DC",
        peg$c28 = peg$literalExpectation("DC", false),
        peg$c29 = function() { return "Domain computers"; },
        peg$c30 = "BA",
        peg$c31 = peg$literalExpectation("BA", false),
        peg$c32 = function() { return "Builtin (local) administrators"; },
        peg$c33 = "BG",
        peg$c34 = peg$literalExpectation("BG", false),
        peg$c35 = function() { return "Builtin (local) guests"; },
        peg$c36 = "BU",
        peg$c37 = peg$literalExpectation("BU", false),
        peg$c38 = function() { return "Builtin (local) users"; },
        peg$c39 = "LA",
        peg$c40 = peg$literalExpectation("LA", false),
        peg$c41 = function() { return "Local administrator account"; },
        peg$c42 = "LG",
        peg$c43 = peg$literalExpectation("LG", false),
        peg$c44 = function() { return "Local group account"; },
        peg$c45 = "AO",
        peg$c46 = peg$literalExpectation("AO", false),
        peg$c47 = function() { return "Account operators"; },
        peg$c48 = "BO",
        peg$c49 = peg$literalExpectation("BO", false),
        peg$c50 = function() { return "Backup operators"; },
        peg$c51 = "PO",
        peg$c52 = peg$literalExpectation("PO", false),
        peg$c53 = function() { return "Printer operators"; },
        peg$c54 = "SO",
        peg$c55 = peg$literalExpectation("SO", false),
        peg$c56 = function() { return "Server operators"; },
        peg$c57 = "AU",
        peg$c58 = peg$literalExpectation("AU", false),
        peg$c59 = function() { return "Authenticated users"; },
        peg$c60 = "PS",
        peg$c61 = peg$literalExpectation("PS", false),
        peg$c62 = function() { return "Personal self"; },
        peg$c63 = "CO",
        peg$c64 = peg$literalExpectation("CO", false),
        peg$c65 = function() { return "Creator owner"; },
        peg$c66 = "CG",
        peg$c67 = peg$literalExpectation("CG", false),
        peg$c68 = function() { return "Creator group"; },
        peg$c69 = "SY",
        peg$c70 = peg$literalExpectation("SY", false),
        peg$c71 = function() { return "Local system"; },
        peg$c72 = "PU",
        peg$c73 = peg$literalExpectation("PU", false),
        peg$c74 = function() { return "Power users"; },
        peg$c75 = "WD",
        peg$c76 = peg$literalExpectation("WD", false),
        peg$c77 = function() { return "Everyone ( World )"; },
        peg$c78 = "RE",
        peg$c79 = peg$literalExpectation("RE", false),
        peg$c80 = function() { return "Replicator"; },
        peg$c81 = "IU",
        peg$c82 = peg$literalExpectation("IU", false),
        peg$c83 = function() { return "Interactive logon user"; },
        peg$c84 = "NU",
        peg$c85 = peg$literalExpectation("NU", false),
        peg$c86 = function() { return "Nework logon user"; },
        peg$c87 = "SU",
        peg$c88 = peg$literalExpectation("SU", false),
        peg$c89 = function() { return "Service logon user"; },
        peg$c90 = "RC",
        peg$c91 = peg$literalExpectation("RC", false),
        peg$c92 = function() { return "Restricted code"; },
        peg$c93 = "WR",
        peg$c94 = peg$literalExpectation("WR", false),
        peg$c95 = function() { return "Write Restricted code"; },
        peg$c96 = "AN",
        peg$c97 = peg$literalExpectation("AN", false),
        peg$c98 = function() { return "Anonymous Logon"; },
        peg$c99 = "SA",
        peg$c100 = peg$literalExpectation("SA", false),
        peg$c101 = function() { return "Schema Administrators"; },
        peg$c102 = "CA",
        peg$c103 = peg$literalExpectation("CA", false),
        peg$c104 = function() { return "Certificate Server Administrators"; },
        peg$c105 = "RS",
        peg$c106 = peg$literalExpectation("RS", false),
        peg$c107 = function() { return "RAS servers group"; },
        peg$c108 = "EA",
        peg$c109 = peg$literalExpectation("EA", false),
        peg$c110 = function() { return "Enterprise administrators"; },
        peg$c111 = "PA",
        peg$c112 = peg$literalExpectation("PA", false),
        peg$c113 = function() { return "Group Policy administrators"; },
        peg$c114 = "RU",
        peg$c115 = peg$literalExpectation("RU", false),
        peg$c116 = function() { return "alias to allow previous windows 2000"; },
        peg$c117 = "LS",
        peg$c118 = peg$literalExpectation("LS", false),
        peg$c119 = function() { return "Local service account (for services)"; },
        peg$c120 = "NS",
        peg$c121 = peg$literalExpectation("NS", false),
        peg$c122 = function() { return "Network service account (for services)"; },
        peg$c123 = "RD",
        peg$c124 = peg$literalExpectation("RD", false),
        peg$c125 = function() { return "Remote desktop users (for terminal server)"; },
        peg$c126 = "NO",
        peg$c127 = peg$literalExpectation("NO", false),
        peg$c128 = function() { return "Network configuration operators ( to manage configuration of networking features)"; },
        peg$c129 = "MU",
        peg$c130 = peg$literalExpectation("MU", false),
        peg$c131 = function() { return "Performance Monitor Users"; },
        peg$c132 = "LU",
        peg$c133 = peg$literalExpectation("LU", false),
        peg$c134 = function() { return "Performance Log Users"; },
        peg$c135 = "IS",
        peg$c136 = peg$literalExpectation("IS", false),
        peg$c137 = function() { return "Anonymous Internet Users"; },
        peg$c138 = "CY",
        peg$c139 = peg$literalExpectation("CY", false),
        peg$c140 = function() { return "Crypto Operators"; },
        peg$c141 = "OW",
        peg$c142 = peg$literalExpectation("OW", false),
        peg$c143 = function() { return "Owner Rights SID"; },
        peg$c144 = "ER",
        peg$c145 = peg$literalExpectation("ER", false),
        peg$c146 = function() { return "Event log readers"; },
        peg$c147 = "RO",
        peg$c148 = peg$literalExpectation("RO", false),
        peg$c149 = function() { return "Enterprise Read-only domain controllers"; },
        peg$c150 = "CD",
        peg$c151 = peg$literalExpectation("CD", false),
        peg$c152 = function() { return "Users who can connect to certification authorities using DCOM"; },
        peg$c153 = "AC",
        peg$c154 = peg$literalExpectation("AC", false),
        peg$c155 = function() { return "All applications running in an app package context"; },
        peg$c156 = "RA",
        peg$c157 = peg$literalExpectation("RA", false),
        peg$c158 = function() { return "Servers in this group enable users of RemoteApp programs and personal virtual desktops access to these resources."; },
        peg$c159 = "ES",
        peg$c160 = peg$literalExpectation("ES", false),
        peg$c161 = function() { return "Servers in this group run virtual machines and host sessions where users RemoteApp programs and personal virtual desktops run."; },
        peg$c162 = "MS",
        peg$c163 = peg$literalExpectation("MS", false),
        peg$c164 = function() { return "Servers in this group can perform routine administrative actions on servers running Remote Desktop Services. "; },
        peg$c165 = "UD",
        peg$c166 = peg$literalExpectation("UD", false),
        peg$c167 = function() { return "UserMode driver"; },
        peg$c168 = "HA",
        peg$c169 = peg$literalExpectation("HA", false),
        peg$c170 = function() { return "Members of this group have complete and unrestricted access to all features of Hyper-V. "; },
        peg$c171 = "CN",
        peg$c172 = peg$literalExpectation("CN", false),
        peg$c173 = function() { return "Members of this group that are domain controllers may be cloned. "; },
        peg$c174 = "AA",
        peg$c175 = peg$literalExpectation("AA", false),
        peg$c176 = function() { return "Members of this group can remotely query authorization attributes and permissions for resources on this computer. "; },
        peg$c177 = "RM",
        peg$c178 = peg$literalExpectation("RM", false),
        peg$c179 = function() { return "Members of this group can access WMI resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user. "; },
        peg$c180 = "AS",
        peg$c181 = peg$literalExpectation("AS", false),
        peg$c182 = function() { return "Authentication Authority Asserted"; },
        peg$c183 = "SS",
        peg$c184 = peg$literalExpectation("SS", false),
        peg$c185 = function() { return "Authentication Service Asserted"; },
        peg$c186 = "AP",
        peg$c187 = peg$literalExpectation("AP", false),
        peg$c188 = function() { return "Members of this group are afforded additional protections against authentication security threats."; },
        peg$c189 = "KA",
        peg$c190 = peg$literalExpectation("KA", false),
        peg$c191 = function() { return "Members of this group have full control over all key credential objects in the domain"; },
        peg$c192 = "EK",
        peg$c193 = peg$literalExpectation("EK", false),
        peg$c194 = function() { return "Members of this group have full control over all key credential objects in the forest"; },
        peg$c195 = "LW",
        peg$c196 = peg$literalExpectation("LW", false),
        peg$c197 = function() { return "Low mandatory level"; },
        peg$c198 = "ME",
        peg$c199 = peg$literalExpectation("ME", false),
        peg$c200 = function() { return "Medium mandatory level"; },
        peg$c201 = "MP",
        peg$c202 = peg$literalExpectation("MP", false),
        peg$c203 = function() { return "Medium Plus mandatory level"; },
        peg$c204 = "HI",
        peg$c205 = peg$literalExpectation("HI", false),
        peg$c206 = function() { return "High mandatory level"; },
        peg$c207 = "SI",
        peg$c208 = peg$literalExpectation("SI", false),
        peg$c209 = function() { return "System mandatory level"; },
        peg$c210 = function(flags) { return flags.length === 0 ? "" : "(flags: " + flags.join(", ") + ")"; },
        peg$c211 = "P",
        peg$c212 = peg$literalExpectation("P", false),
        peg$c213 = function() { return "DACL or SACL Protected"; },
        peg$c214 = "AR",
        peg$c215 = peg$literalExpectation("AR", false),
        peg$c216 = function() { return "Auto inherit request"; },
        peg$c217 = "AI",
        peg$c218 = peg$literalExpectation("AI", false),
        peg$c219 = function() { return "DACL/SACL are auto inherited"; },
        peg$c220 = "NO_ACCESS_CONTROL",
        peg$c221 = peg$literalExpectation("NO_ACCESS_CONTROL", false),
        peg$c222 = function() { return "Null ACL"; },
        peg$c223 = function(aces) { return "\t" + aces.join("\n\t"); },
        peg$c224 = "(",
        peg$c225 = peg$literalExpectation("(", false),
        peg$c226 = ";",
        peg$c227 = peg$literalExpectation(";", false),
        peg$c228 = ")",
        peg$c229 = peg$literalExpectation(")", false),
        peg$c230 = function(type, flag, rights, objguid, inhobjguid, sid) { return type + " on " + rights + " for " + sid; },
        peg$c231 = "A",
        peg$c232 = peg$literalExpectation("A", false),
        peg$c233 = function() { return "Access allowed"; },
        peg$c234 = "D",
        peg$c235 = peg$literalExpectation("D", false),
        peg$c236 = function() { return "Access denied"; },
        peg$c237 = "OA",
        peg$c238 = peg$literalExpectation("OA", false),
        peg$c239 = function() { return "Object access allowed"; },
        peg$c240 = "OD",
        peg$c241 = peg$literalExpectation("OD", false),
        peg$c242 = function() { return "Object access denied"; },
        peg$c243 = function() { return "Audit"; },
        peg$c244 = "AL",
        peg$c245 = peg$literalExpectation("AL", false),
        peg$c246 = function() { return "Alarm"; },
        peg$c247 = "OU",
        peg$c248 = peg$literalExpectation("OU", false),
        peg$c249 = function() { return "Object audit"; },
        peg$c250 = "OL",
        peg$c251 = peg$literalExpectation("OL", false),
        peg$c252 = function() { return "Object alarm"; },
        peg$c253 = "ML",
        peg$c254 = peg$literalExpectation("ML", false),
        peg$c255 = function() { return "Integrity label"; },
        peg$c256 = "TL",
        peg$c257 = peg$literalExpectation("TL", false),
        peg$c258 = function() { return "Process trust label"; },
        peg$c259 = "XA",
        peg$c260 = peg$literalExpectation("XA", false),
        peg$c261 = function() { return "Callback access allowed"; },
        peg$c262 = "XD",
        peg$c263 = peg$literalExpectation("XD", false),
        peg$c264 = function() { return "Callback access denied"; },
        peg$c265 = function() { return "Resource attribute"; },
        peg$c266 = "SP",
        peg$c267 = peg$literalExpectation("SP", false),
        peg$c268 = function() { return "Scoped policy"; },
        peg$c269 = "XU",
        peg$c270 = peg$literalExpectation("XU", false),
        peg$c271 = function() { return "Callback audit"; },
        peg$c272 = "ZA",
        peg$c273 = peg$literalExpectation("ZA", false),
        peg$c274 = function() { return "Callback object access allowed"; },
        peg$c275 = ";;;;",
        peg$c276 = peg$literalExpectation(";;;;", false),
        peg$c277 = "S-1-17-",
        peg$c278 = peg$literalExpectation("S-1-17-", false),
        peg$c279 = "S-1-1-0",
        peg$c280 = peg$literalExpectation("S-1-1-0", false),
        peg$c281 = ";(",
        peg$c282 = peg$literalExpectation(";(", false),
        peg$c283 = "))",
        peg$c284 = peg$literalExpectation("))", false),
        peg$c285 = "\"",
        peg$c286 = peg$literalExpectation("\"", false),
        peg$c287 = ",",
        peg$c288 = peg$literalExpectation(",", false),
        peg$c289 = "TI",
        peg$c290 = peg$literalExpectation("TI", false),
        peg$c291 = "TU",
        peg$c292 = peg$literalExpectation("TU", false),
        peg$c293 = "TS",
        peg$c294 = peg$literalExpectation("TS", false),
        peg$c295 = "TD",
        peg$c296 = peg$literalExpectation("TD", false),
        peg$c297 = "TX",
        peg$c298 = peg$literalExpectation("TX", false),
        peg$c299 = "TB",
        peg$c300 = peg$literalExpectation("TB", false),
        peg$c301 = "0",
        peg$c302 = peg$literalExpectation("0", false),
        peg$c303 = "1",
        peg$c304 = peg$literalExpectation("1", false),
        peg$c305 = "0x",
        peg$c306 = peg$literalExpectation("0x", false),
        peg$c307 = "00",
        peg$c308 = peg$literalExpectation("00", false),
        peg$c309 = /^[a-fA-F0-9]/,
        peg$c310 = peg$classExpectation([["a", "f"], ["A", "F"], ["0", "9"]], false, false),
        peg$c311 = function(left, right) { return left + (right || ""); },
        peg$c312 = function(a, b, c, d) { return a + b + c + d; },
        peg$c313 = function(left, right) { return left + right; },
        peg$c314 = "2",
        peg$c315 = peg$literalExpectation("2", false),
        peg$c316 = "3",
        peg$c317 = peg$literalExpectation("3", false),
        peg$c318 = "",
        peg$c319 = "CI",
        peg$c320 = peg$literalExpectation("CI", false),
        peg$c321 = "OI",
        peg$c322 = peg$literalExpectation("OI", false),
        peg$c323 = "NP",
        peg$c324 = peg$literalExpectation("NP", false),
        peg$c325 = "IO",
        peg$c326 = peg$literalExpectation("IO", false),
        peg$c327 = "ID",
        peg$c328 = peg$literalExpectation("ID", false),
        peg$c329 = "FA",
        peg$c330 = peg$literalExpectation("FA", false),
        peg$c331 = /^[0-7]/,
        peg$c332 = peg$classExpectation([["0", "7"]], false, false),
        peg$c333 = /^[0-9]/,
        peg$c334 = peg$classExpectation([["0", "9"]], false, false),
        peg$c335 = function(v) { return "0x" + v; },
        peg$c336 = function(v) { return "0" + v; },
        peg$c337 = function(v) { return v; },
        peg$c338 = function(textrights) { return textrights.join(", "); },
        peg$c339 = "GA",
        peg$c340 = peg$literalExpectation("GA", false),
        peg$c341 = function() { return "General all"; },
        peg$c342 = "GW",
        peg$c343 = peg$literalExpectation("GW", false),
        peg$c344 = function() { return "General write"; },
        peg$c345 = "GR",
        peg$c346 = peg$literalExpectation("GR", false),
        peg$c347 = function() { return "General read"; },
        peg$c348 = "GX",
        peg$c349 = peg$literalExpectation("GX", false),
        peg$c350 = function() { return "General execute"; },
        peg$c351 = "WO",
        peg$c352 = peg$literalExpectation("WO", false),
        peg$c353 = function() { return "Write owner"; },
        peg$c354 = function() { return "Write DAC"; },
        peg$c355 = function() { return "Read control"; },
        peg$c356 = "SD",
        peg$c357 = peg$literalExpectation("SD", false),
        peg$c358 = function() { return "Standard delete"; },
        peg$c359 = "RP",
        peg$c360 = peg$literalExpectation("RP", false),
        peg$c361 = function() { return "Read property"; },
        peg$c362 = "WP",
        peg$c363 = peg$literalExpectation("WP", false),
        peg$c364 = function() { return "Write property"; },
        peg$c365 = "CC",
        peg$c366 = peg$literalExpectation("CC", false),
        peg$c367 = function() { return "Create child"; },
        peg$c368 = function() { return "Delete child"; },
        peg$c369 = "LC",
        peg$c370 = peg$literalExpectation("LC", false),
        peg$c371 = function() { return "List children"; },
        peg$c372 = "SW",
        peg$c373 = peg$literalExpectation("SW", false),
        peg$c374 = function() { return "Self write"; },
        peg$c375 = "LO",
        peg$c376 = peg$literalExpectation("LO", false),
        peg$c377 = function() { return "List object"; },
        peg$c378 = "DT",
        peg$c379 = peg$literalExpectation("DT", false),
        peg$c380 = function() { return "Delete tree"; },
        peg$c381 = "CR",
        peg$c382 = peg$literalExpectation("CR", false),
        peg$c383 = function() { return "Control access"; },
        peg$c384 = function() { return "Write dac"; },
        peg$c385 = function() { return "Generic all"; },
        peg$c386 = function() { return "Generic read"; },
        peg$c387 = function() { return "Generic write"; },
        peg$c388 = function() { return "Generic execute"; },
        peg$c389 = function() { return "File all"; },
        peg$c390 = "FR",
        peg$c391 = peg$literalExpectation("FR", false),
        peg$c392 = function() { return "File read"; },
        peg$c393 = "FW",
        peg$c394 = peg$literalExpectation("FW", false),
        peg$c395 = function() { return "File write"; },
        peg$c396 = "FX",
        peg$c397 = peg$literalExpectation("FX", false),
        peg$c398 = function() { return "File execute"; },
        peg$c399 = function() { return "Key all"; },
        peg$c400 = "KR",
        peg$c401 = peg$literalExpectation("KR", false),
        peg$c402 = function() { return "Key read"; },
        peg$c403 = "KW",
        peg$c404 = peg$literalExpectation("KW", false),
        peg$c405 = function() { return "Key write"; },
        peg$c406 = "KX",
        peg$c407 = peg$literalExpectation("KX", false),
        peg$c408 = function() { return "Key execute"; },
        peg$c409 = "NW",
        peg$c410 = peg$literalExpectation("NW", false),
        peg$c411 = function() { return "No write up"; },
        peg$c412 = "NR",
        peg$c413 = peg$literalExpectation("NR", false),
        peg$c414 = function() { return "No read up"; },
        peg$c415 = "NX",
        peg$c416 = peg$literalExpectation("NX", false),
        peg$c417 = function() { return "No execute up"; },
        peg$c418 = "-",
        peg$c419 = peg$literalExpectation("-", false),
        peg$c420 = /^[ \t\n\r]/,
        peg$c421 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
        peg$c422 = "||",
        peg$c423 = peg$literalExpectation("||", false),
        peg$c424 = "&&",
        peg$c425 = peg$literalExpectation("&&", false),
        peg$c426 = "!",
        peg$c427 = peg$literalExpectation("!", false),
        peg$c428 = "Member_of",
        peg$c429 = peg$literalExpectation("Member_of", false),
        peg$c430 = "Not_Member_of",
        peg$c431 = peg$literalExpectation("Not_Member_of", false),
        peg$c432 = "Member_of_Any",
        peg$c433 = peg$literalExpectation("Member_of_Any", false),
        peg$c434 = "Not_Member_of_Any",
        peg$c435 = peg$literalExpectation("Not_Member_of_Any", false),
        peg$c436 = "Device_Member_of",
        peg$c437 = peg$literalExpectation("Device_Member_of", false),
        peg$c438 = "Device_Member_of_Any",
        peg$c439 = peg$literalExpectation("Device_Member_of_Any", false),
        peg$c440 = "Not_Device_Member_of",
        peg$c441 = peg$literalExpectation("Not_Device_Member_of", false),
        peg$c442 = "Not_Device_Member_of_Any",
        peg$c443 = peg$literalExpectation("Not_Device_Member_of_Any", false),
        peg$c444 = "Exists",
        peg$c445 = peg$literalExpectation("Exists", false),
        peg$c446 = "Not_exists",
        peg$c447 = peg$literalExpectation("Not_exists", false),
        peg$c448 = "<",
        peg$c449 = peg$literalExpectation("<", false),
        peg$c450 = "<=",
        peg$c451 = peg$literalExpectation("<=", false),
        peg$c452 = ">",
        peg$c453 = peg$literalExpectation(">", false),
        peg$c454 = ">=",
        peg$c455 = peg$literalExpectation(">=", false),
        peg$c456 = "==",
        peg$c457 = peg$literalExpectation("==", false),
        peg$c458 = "!=",
        peg$c459 = peg$literalExpectation("!=", false),
        peg$c460 = "Contains",
        peg$c461 = peg$literalExpectation("Contains", false),
        peg$c462 = "Not_Contains",
        peg$c463 = peg$literalExpectation("Not_Contains", false),
        peg$c464 = "Any_of",
        peg$c465 = peg$literalExpectation("Any_of", false),
        peg$c466 = "Not_Any_of",
        peg$c467 = peg$literalExpectation("Not_Any_of", false),
        peg$c468 = "@",
        peg$c469 = peg$literalExpectation("@", false),
        peg$c470 = /^[a-zA-Z]/,
        peg$c471 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false),
        peg$c472 = ":",
        peg$c473 = peg$literalExpectation(":", false),
        peg$c474 = ".",
        peg$c475 = peg$literalExpectation(".", false),
        peg$c476 = "/",
        peg$c477 = peg$literalExpectation("/", false),
        peg$c478 = "_",
        peg$c479 = peg$literalExpectation("_", false),
        peg$c480 = "@user.",
        peg$c481 = peg$literalExpectation("@user.", false),
        peg$c482 = "@device.",
        peg$c483 = peg$literalExpectation("@device.", false),
        peg$c484 = "@resource.",
        peg$c485 = peg$literalExpectation("@resource.", false),
        peg$c486 = "{",
        peg$c487 = peg$literalExpectation("{", false),
        peg$c488 = "}",
        peg$c489 = peg$literalExpectation("}", false),
        peg$c490 = "SID(",
        peg$c491 = peg$literalExpectation("SID(", false),
        peg$c492 = "+",
        peg$c493 = peg$literalExpectation("+", false),
        peg$c494 = /^[\x01-\x7F]/,
        peg$c495 = peg$classExpectation([["\x01", "\x7F"]], false, false),
        peg$c496 = "#",
        peg$c497 = peg$literalExpectation("#", false),
        peg$c498 = "$",
        peg$c499 = peg$literalExpectation("$", false),
        peg$c500 = "'",
        peg$c501 = peg$literalExpectation("'", false),
        peg$c502 = "*",
        peg$c503 = peg$literalExpectation("*", false),
        peg$c504 = "?",
        peg$c505 = peg$literalExpectation("?", false),
        peg$c506 = "[",
        peg$c507 = peg$literalExpectation("[", false),
        peg$c508 = "\\",
        peg$c509 = peg$literalExpectation("\\", false),
        peg$c510 = "]",
        peg$c511 = peg$literalExpectation("]", false),
        peg$c512 = "^",
        peg$c513 = peg$literalExpectation("^", false),
        peg$c514 = "`",
        peg$c515 = peg$literalExpectation("`", false),
        peg$c516 = "~",
        peg$c517 = peg$literalExpectation("~", false),
        peg$c518 = /^[\x80-\xFFFF]/,
        peg$c519 = peg$classExpectation([["\x80", "\xFF"], "F", "F"], false, false),
        peg$c520 = "%",
        peg$c521 = peg$literalExpectation("%", false),
        peg$c522 = "S-1-",
        peg$c523 = peg$literalExpectation("S-1-", false),
        peg$c524 = function(i, s) { return "S-1-" + i + "-" + s.join("-"); },
        peg$c525 = function(a, b) { return a + (b ? b : ""); },
        peg$c526 = function(a) { return a; },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsesddl() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseowner_string();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsegroup_string();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsedacl_string();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesacl_string();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseowner_string() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c0) {
        s1 = peg$c0;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesid_string();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsegroup_string() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s1 = peg$c3;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesid_string();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c5(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedacl_string() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c6) {
        s1 = peg$c6;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseacl_flag_string();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaces();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c8(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesacl_string() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c9) {
        s1 = peg$c9;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseacl_flag_string();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaces();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c11(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesid_string() {
      var s0;

      s0 = peg$parsesid_token();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSID();
      }

      return s0;
    }

    function peg$parsesid_token() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c12) {
        s1 = peg$c12;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s1 = peg$c15;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c18) {
            s1 = peg$c18;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c20();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c21) {
              s1 = peg$c21;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c23();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c24) {
                s1 = peg$c24;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c25); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c27) {
                  s1 = peg$c27;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c28); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c29();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c30) {
                    s1 = peg$c30;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c32();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c33) {
                      s1 = peg$c33;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c35();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c36) {
                        s1 = peg$c36;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c37); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c38();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c39) {
                          s1 = peg$c39;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c40); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c41();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c42) {
                            s1 = peg$c42;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c43); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c44();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c45) {
                              s1 = peg$c45;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c46); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c47();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 2) === peg$c48) {
                                s1 = peg$c48;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c49); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c50();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c51) {
                                  s1 = peg$c51;
                                  peg$currPos += 2;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c52); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c53();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 2) === peg$c54) {
                                    s1 = peg$c54;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c55); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c56();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c57) {
                                      s1 = peg$c57;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c58); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c59();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 2) === peg$c60) {
                                        s1 = peg$c60;
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c62();
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 2) === peg$c63) {
                                          s1 = peg$c63;
                                          peg$currPos += 2;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c64); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c65();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 2) === peg$c66) {
                                            s1 = peg$c66;
                                            peg$currPos += 2;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c67); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c68();
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 2) === peg$c69) {
                                              s1 = peg$c69;
                                              peg$currPos += 2;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c70); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c71();
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 2) === peg$c72) {
                                                s1 = peg$c72;
                                                peg$currPos += 2;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c73); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c74();
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 2) === peg$c75) {
                                                  s1 = peg$c75;
                                                  peg$currPos += 2;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c76); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c77();
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.substr(peg$currPos, 2) === peg$c78) {
                                                    s1 = peg$c78;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c79); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c80();
                                                  }
                                                  s0 = s1;
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 2) === peg$c81) {
                                                      s1 = peg$c81;
                                                      peg$currPos += 2;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c82); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c83();
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      if (input.substr(peg$currPos, 2) === peg$c84) {
                                                        s1 = peg$c84;
                                                        peg$currPos += 2;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c85); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c86();
                                                      }
                                                      s0 = s1;
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        if (input.substr(peg$currPos, 2) === peg$c87) {
                                                          s1 = peg$c87;
                                                          peg$currPos += 2;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c88); }
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$c89();
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          if (input.substr(peg$currPos, 2) === peg$c90) {
                                                            s1 = peg$c90;
                                                            peg$currPos += 2;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c91); }
                                                          }
                                                          if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c92();
                                                          }
                                                          s0 = s1;
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            if (input.substr(peg$currPos, 2) === peg$c93) {
                                                              s1 = peg$c93;
                                                              peg$currPos += 2;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c94); }
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c95();
                                                            }
                                                            s0 = s1;
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              if (input.substr(peg$currPos, 2) === peg$c96) {
                                                                s1 = peg$c96;
                                                                peg$currPos += 2;
                                                              } else {
                                                                s1 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c97); }
                                                              }
                                                              if (s1 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c98();
                                                              }
                                                              s0 = s1;
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                if (input.substr(peg$currPos, 2) === peg$c99) {
                                                                  s1 = peg$c99;
                                                                  peg$currPos += 2;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                                                                }
                                                                if (s1 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s1 = peg$c101();
                                                                }
                                                                s0 = s1;
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  if (input.substr(peg$currPos, 2) === peg$c102) {
                                                                    s1 = peg$c102;
                                                                    peg$currPos += 2;
                                                                  } else {
                                                                    s1 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c103); }
                                                                  }
                                                                  if (s1 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c104();
                                                                  }
                                                                  s0 = s1;
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$currPos;
                                                                    if (input.substr(peg$currPos, 2) === peg$c105) {
                                                                      s1 = peg$c105;
                                                                      peg$currPos += 2;
                                                                    } else {
                                                                      s1 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c106); }
                                                                    }
                                                                    if (s1 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s1 = peg$c107();
                                                                    }
                                                                    s0 = s1;
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$currPos;
                                                                      if (input.substr(peg$currPos, 2) === peg$c108) {
                                                                        s1 = peg$c108;
                                                                        peg$currPos += 2;
                                                                      } else {
                                                                        s1 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                                                      }
                                                                      if (s1 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c110();
                                                                      }
                                                                      s0 = s1;
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$currPos;
                                                                        if (input.substr(peg$currPos, 2) === peg$c111) {
                                                                          s1 = peg$c111;
                                                                          peg$currPos += 2;
                                                                        } else {
                                                                          s1 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c112); }
                                                                        }
                                                                        if (s1 !== peg$FAILED) {
                                                                          peg$savedPos = s0;
                                                                          s1 = peg$c113();
                                                                        }
                                                                        s0 = s1;
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$currPos;
                                                                          if (input.substr(peg$currPos, 2) === peg$c114) {
                                                                            s1 = peg$c114;
                                                                            peg$currPos += 2;
                                                                          } else {
                                                                            s1 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                                                          }
                                                                          if (s1 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$c116();
                                                                          }
                                                                          s0 = s1;
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$currPos;
                                                                            if (input.substr(peg$currPos, 2) === peg$c117) {
                                                                              s1 = peg$c117;
                                                                              peg$currPos += 2;
                                                                            } else {
                                                                              s1 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c118); }
                                                                            }
                                                                            if (s1 !== peg$FAILED) {
                                                                              peg$savedPos = s0;
                                                                              s1 = peg$c119();
                                                                            }
                                                                            s0 = s1;
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$currPos;
                                                                              if (input.substr(peg$currPos, 2) === peg$c120) {
                                                                                s1 = peg$c120;
                                                                                peg$currPos += 2;
                                                                              } else {
                                                                                s1 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                                                              }
                                                                              if (s1 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$c122();
                                                                              }
                                                                              s0 = s1;
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$currPos;
                                                                                if (input.substr(peg$currPos, 2) === peg$c123) {
                                                                                  s1 = peg$c123;
                                                                                  peg$currPos += 2;
                                                                                } else {
                                                                                  s1 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c124); }
                                                                                }
                                                                                if (s1 !== peg$FAILED) {
                                                                                  peg$savedPos = s0;
                                                                                  s1 = peg$c125();
                                                                                }
                                                                                s0 = s1;
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$currPos;
                                                                                  if (input.substr(peg$currPos, 2) === peg$c126) {
                                                                                    s1 = peg$c126;
                                                                                    peg$currPos += 2;
                                                                                  } else {
                                                                                    s1 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c127); }
                                                                                  }
                                                                                  if (s1 !== peg$FAILED) {
                                                                                    peg$savedPos = s0;
                                                                                    s1 = peg$c128();
                                                                                  }
                                                                                  s0 = s1;
                                                                                  if (s0 === peg$FAILED) {
                                                                                    s0 = peg$currPos;
                                                                                    if (input.substr(peg$currPos, 2) === peg$c129) {
                                                                                      s1 = peg$c129;
                                                                                      peg$currPos += 2;
                                                                                    } else {
                                                                                      s1 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c130); }
                                                                                    }
                                                                                    if (s1 !== peg$FAILED) {
                                                                                      peg$savedPos = s0;
                                                                                      s1 = peg$c131();
                                                                                    }
                                                                                    s0 = s1;
                                                                                    if (s0 === peg$FAILED) {
                                                                                      s0 = peg$currPos;
                                                                                      if (input.substr(peg$currPos, 2) === peg$c132) {
                                                                                        s1 = peg$c132;
                                                                                        peg$currPos += 2;
                                                                                      } else {
                                                                                        s1 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                                                                      }
                                                                                      if (s1 !== peg$FAILED) {
                                                                                        peg$savedPos = s0;
                                                                                        s1 = peg$c134();
                                                                                      }
                                                                                      s0 = s1;
                                                                                      if (s0 === peg$FAILED) {
                                                                                        s0 = peg$currPos;
                                                                                        if (input.substr(peg$currPos, 2) === peg$c135) {
                                                                                          s1 = peg$c135;
                                                                                          peg$currPos += 2;
                                                                                        } else {
                                                                                          s1 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c136); }
                                                                                        }
                                                                                        if (s1 !== peg$FAILED) {
                                                                                          peg$savedPos = s0;
                                                                                          s1 = peg$c137();
                                                                                        }
                                                                                        s0 = s1;
                                                                                        if (s0 === peg$FAILED) {
                                                                                          s0 = peg$currPos;
                                                                                          if (input.substr(peg$currPos, 2) === peg$c138) {
                                                                                            s1 = peg$c138;
                                                                                            peg$currPos += 2;
                                                                                          } else {
                                                                                            s1 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                                                                          }
                                                                                          if (s1 !== peg$FAILED) {
                                                                                            peg$savedPos = s0;
                                                                                            s1 = peg$c140();
                                                                                          }
                                                                                          s0 = s1;
                                                                                          if (s0 === peg$FAILED) {
                                                                                            s0 = peg$currPos;
                                                                                            if (input.substr(peg$currPos, 2) === peg$c141) {
                                                                                              s1 = peg$c141;
                                                                                              peg$currPos += 2;
                                                                                            } else {
                                                                                              s1 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c142); }
                                                                                            }
                                                                                            if (s1 !== peg$FAILED) {
                                                                                              peg$savedPos = s0;
                                                                                              s1 = peg$c143();
                                                                                            }
                                                                                            s0 = s1;
                                                                                            if (s0 === peg$FAILED) {
                                                                                              s0 = peg$currPos;
                                                                                              if (input.substr(peg$currPos, 2) === peg$c144) {
                                                                                                s1 = peg$c144;
                                                                                                peg$currPos += 2;
                                                                                              } else {
                                                                                                s1 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                                                                              }
                                                                                              if (s1 !== peg$FAILED) {
                                                                                                peg$savedPos = s0;
                                                                                                s1 = peg$c146();
                                                                                              }
                                                                                              s0 = s1;
                                                                                              if (s0 === peg$FAILED) {
                                                                                                s0 = peg$currPos;
                                                                                                if (input.substr(peg$currPos, 2) === peg$c147) {
                                                                                                  s1 = peg$c147;
                                                                                                  peg$currPos += 2;
                                                                                                } else {
                                                                                                  s1 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c148); }
                                                                                                }
                                                                                                if (s1 !== peg$FAILED) {
                                                                                                  peg$savedPos = s0;
                                                                                                  s1 = peg$c149();
                                                                                                }
                                                                                                s0 = s1;
                                                                                                if (s0 === peg$FAILED) {
                                                                                                  s0 = peg$currPos;
                                                                                                  if (input.substr(peg$currPos, 2) === peg$c150) {
                                                                                                    s1 = peg$c150;
                                                                                                    peg$currPos += 2;
                                                                                                  } else {
                                                                                                    s1 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c151); }
                                                                                                  }
                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                    peg$savedPos = s0;
                                                                                                    s1 = peg$c152();
                                                                                                  }
                                                                                                  s0 = s1;
                                                                                                  if (s0 === peg$FAILED) {
                                                                                                    s0 = peg$currPos;
                                                                                                    if (input.substr(peg$currPos, 2) === peg$c153) {
                                                                                                      s1 = peg$c153;
                                                                                                      peg$currPos += 2;
                                                                                                    } else {
                                                                                                      s1 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c154); }
                                                                                                    }
                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                      peg$savedPos = s0;
                                                                                                      s1 = peg$c155();
                                                                                                    }
                                                                                                    s0 = s1;
                                                                                                    if (s0 === peg$FAILED) {
                                                                                                      s0 = peg$currPos;
                                                                                                      if (input.substr(peg$currPos, 2) === peg$c156) {
                                                                                                        s1 = peg$c156;
                                                                                                        peg$currPos += 2;
                                                                                                      } else {
                                                                                                        s1 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c157); }
                                                                                                      }
                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                        peg$savedPos = s0;
                                                                                                        s1 = peg$c158();
                                                                                                      }
                                                                                                      s0 = s1;
                                                                                                      if (s0 === peg$FAILED) {
                                                                                                        s0 = peg$currPos;
                                                                                                        if (input.substr(peg$currPos, 2) === peg$c159) {
                                                                                                          s1 = peg$c159;
                                                                                                          peg$currPos += 2;
                                                                                                        } else {
                                                                                                          s1 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c160); }
                                                                                                        }
                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                          peg$savedPos = s0;
                                                                                                          s1 = peg$c161();
                                                                                                        }
                                                                                                        s0 = s1;
                                                                                                        if (s0 === peg$FAILED) {
                                                                                                          s0 = peg$currPos;
                                                                                                          if (input.substr(peg$currPos, 2) === peg$c162) {
                                                                                                            s1 = peg$c162;
                                                                                                            peg$currPos += 2;
                                                                                                          } else {
                                                                                                            s1 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c163); }
                                                                                                          }
                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                            peg$savedPos = s0;
                                                                                                            s1 = peg$c164();
                                                                                                          }
                                                                                                          s0 = s1;
                                                                                                          if (s0 === peg$FAILED) {
                                                                                                            s0 = peg$currPos;
                                                                                                            if (input.substr(peg$currPos, 2) === peg$c165) {
                                                                                                              s1 = peg$c165;
                                                                                                              peg$currPos += 2;
                                                                                                            } else {
                                                                                                              s1 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c166); }
                                                                                                            }
                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                              peg$savedPos = s0;
                                                                                                              s1 = peg$c167();
                                                                                                            }
                                                                                                            s0 = s1;
                                                                                                            if (s0 === peg$FAILED) {
                                                                                                              s0 = peg$currPos;
                                                                                                              if (input.substr(peg$currPos, 2) === peg$c168) {
                                                                                                                s1 = peg$c168;
                                                                                                                peg$currPos += 2;
                                                                                                              } else {
                                                                                                                s1 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c169); }
                                                                                                              }
                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                peg$savedPos = s0;
                                                                                                                s1 = peg$c170();
                                                                                                              }
                                                                                                              s0 = s1;
                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                s0 = peg$currPos;
                                                                                                                if (input.substr(peg$currPos, 2) === peg$c171) {
                                                                                                                  s1 = peg$c171;
                                                                                                                  peg$currPos += 2;
                                                                                                                } else {
                                                                                                                  s1 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c172); }
                                                                                                                }
                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                  peg$savedPos = s0;
                                                                                                                  s1 = peg$c173();
                                                                                                                }
                                                                                                                s0 = s1;
                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                  s0 = peg$currPos;
                                                                                                                  if (input.substr(peg$currPos, 2) === peg$c174) {
                                                                                                                    s1 = peg$c174;
                                                                                                                    peg$currPos += 2;
                                                                                                                  } else {
                                                                                                                    s1 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c175); }
                                                                                                                  }
                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                    peg$savedPos = s0;
                                                                                                                    s1 = peg$c176();
                                                                                                                  }
                                                                                                                  s0 = s1;
                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                    s0 = peg$currPos;
                                                                                                                    if (input.substr(peg$currPos, 2) === peg$c177) {
                                                                                                                      s1 = peg$c177;
                                                                                                                      peg$currPos += 2;
                                                                                                                    } else {
                                                                                                                      s1 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c178); }
                                                                                                                    }
                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                      peg$savedPos = s0;
                                                                                                                      s1 = peg$c179();
                                                                                                                    }
                                                                                                                    s0 = s1;
                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                      s0 = peg$currPos;
                                                                                                                      if (input.substr(peg$currPos, 2) === peg$c180) {
                                                                                                                        s1 = peg$c180;
                                                                                                                        peg$currPos += 2;
                                                                                                                      } else {
                                                                                                                        s1 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c181); }
                                                                                                                      }
                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                        peg$savedPos = s0;
                                                                                                                        s1 = peg$c182();
                                                                                                                      }
                                                                                                                      s0 = s1;
                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                        s0 = peg$currPos;
                                                                                                                        if (input.substr(peg$currPos, 2) === peg$c183) {
                                                                                                                          s1 = peg$c183;
                                                                                                                          peg$currPos += 2;
                                                                                                                        } else {
                                                                                                                          s1 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c184); }
                                                                                                                        }
                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                          peg$savedPos = s0;
                                                                                                                          s1 = peg$c185();
                                                                                                                        }
                                                                                                                        s0 = s1;
                                                                                                                        if (s0 === peg$FAILED) {
                                                                                                                          s0 = peg$currPos;
                                                                                                                          if (input.substr(peg$currPos, 2) === peg$c186) {
                                                                                                                            s1 = peg$c186;
                                                                                                                            peg$currPos += 2;
                                                                                                                          } else {
                                                                                                                            s1 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c187); }
                                                                                                                          }
                                                                                                                          if (s1 !== peg$FAILED) {
                                                                                                                            peg$savedPos = s0;
                                                                                                                            s1 = peg$c188();
                                                                                                                          }
                                                                                                                          s0 = s1;
                                                                                                                          if (s0 === peg$FAILED) {
                                                                                                                            s0 = peg$currPos;
                                                                                                                            if (input.substr(peg$currPos, 2) === peg$c189) {
                                                                                                                              s1 = peg$c189;
                                                                                                                              peg$currPos += 2;
                                                                                                                            } else {
                                                                                                                              s1 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c190); }
                                                                                                                            }
                                                                                                                            if (s1 !== peg$FAILED) {
                                                                                                                              peg$savedPos = s0;
                                                                                                                              s1 = peg$c191();
                                                                                                                            }
                                                                                                                            s0 = s1;
                                                                                                                            if (s0 === peg$FAILED) {
                                                                                                                              s0 = peg$currPos;
                                                                                                                              if (input.substr(peg$currPos, 2) === peg$c192) {
                                                                                                                                s1 = peg$c192;
                                                                                                                                peg$currPos += 2;
                                                                                                                              } else {
                                                                                                                                s1 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                                                                                                              }
                                                                                                                              if (s1 !== peg$FAILED) {
                                                                                                                                peg$savedPos = s0;
                                                                                                                                s1 = peg$c194();
                                                                                                                              }
                                                                                                                              s0 = s1;
                                                                                                                              if (s0 === peg$FAILED) {
                                                                                                                                s0 = peg$currPos;
                                                                                                                                if (input.substr(peg$currPos, 2) === peg$c195) {
                                                                                                                                  s1 = peg$c195;
                                                                                                                                  peg$currPos += 2;
                                                                                                                                } else {
                                                                                                                                  s1 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c196); }
                                                                                                                                }
                                                                                                                                if (s1 !== peg$FAILED) {
                                                                                                                                  peg$savedPos = s0;
                                                                                                                                  s1 = peg$c197();
                                                                                                                                }
                                                                                                                                s0 = s1;
                                                                                                                                if (s0 === peg$FAILED) {
                                                                                                                                  s0 = peg$currPos;
                                                                                                                                  if (input.substr(peg$currPos, 2) === peg$c198) {
                                                                                                                                    s1 = peg$c198;
                                                                                                                                    peg$currPos += 2;
                                                                                                                                  } else {
                                                                                                                                    s1 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c199); }
                                                                                                                                  }
                                                                                                                                  if (s1 !== peg$FAILED) {
                                                                                                                                    peg$savedPos = s0;
                                                                                                                                    s1 = peg$c200();
                                                                                                                                  }
                                                                                                                                  s0 = s1;
                                                                                                                                  if (s0 === peg$FAILED) {
                                                                                                                                    s0 = peg$currPos;
                                                                                                                                    if (input.substr(peg$currPos, 2) === peg$c201) {
                                                                                                                                      s1 = peg$c201;
                                                                                                                                      peg$currPos += 2;
                                                                                                                                    } else {
                                                                                                                                      s1 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                                                                                                                    }
                                                                                                                                    if (s1 !== peg$FAILED) {
                                                                                                                                      peg$savedPos = s0;
                                                                                                                                      s1 = peg$c203();
                                                                                                                                    }
                                                                                                                                    s0 = s1;
                                                                                                                                    if (s0 === peg$FAILED) {
                                                                                                                                      s0 = peg$currPos;
                                                                                                                                      if (input.substr(peg$currPos, 2) === peg$c204) {
                                                                                                                                        s1 = peg$c204;
                                                                                                                                        peg$currPos += 2;
                                                                                                                                      } else {
                                                                                                                                        s1 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                                                                                                                      }
                                                                                                                                      if (s1 !== peg$FAILED) {
                                                                                                                                        peg$savedPos = s0;
                                                                                                                                        s1 = peg$c206();
                                                                                                                                      }
                                                                                                                                      s0 = s1;
                                                                                                                                      if (s0 === peg$FAILED) {
                                                                                                                                        s0 = peg$currPos;
                                                                                                                                        if (input.substr(peg$currPos, 2) === peg$c207) {
                                                                                                                                          s1 = peg$c207;
                                                                                                                                          peg$currPos += 2;
                                                                                                                                        } else {
                                                                                                                                          s1 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c208); }
                                                                                                                                        }
                                                                                                                                        if (s1 !== peg$FAILED) {
                                                                                                                                          peg$savedPos = s0;
                                                                                                                                          s1 = peg$c209();
                                                                                                                                        }
                                                                                                                                        s0 = s1;
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseacl_flag_string() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseacl_flag();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseacl_flag();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c210(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseacl_flag() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 80) {
        s1 = peg$c211;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c212); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c213();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c214) {
          s1 = peg$c214;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c215); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c216();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c217) {
            s1 = peg$c217;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c218); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c219();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 17) === peg$c220) {
              s1 = peg$c220;
              peg$currPos += 17;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c221); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c222();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseaces() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseace();
      if (s2 === peg$FAILED) {
        s2 = peg$parseconditional_ace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseresource_attribute_ace();
        }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseace();
        if (s2 === peg$FAILED) {
          s2 = peg$parseconditional_ace();
          if (s2 === peg$FAILED) {
            s2 = peg$parseresource_attribute_ace();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c223(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c224;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseace_type();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c226;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c227); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseace_flag_string();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c226;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c227); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseace_rights();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s7 = peg$c226;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseguid();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c226;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c227); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseguid();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s11 = peg$c226;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c227); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsesid_string();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c228;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c229); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c230(s2, s4, s6, s8, s10, s12);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseace_type() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 65) {
        s1 = peg$c231;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c232); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c233();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 68) {
          s1 = peg$c234;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c235); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c236();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c237) {
            s1 = peg$c237;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c238); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c239();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c240) {
              s1 = peg$c240;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c241); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c242();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c57) {
                s1 = peg$c57;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c58); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c243();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c244) {
                  s1 = peg$c244;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c245); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c246();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c247) {
                    s1 = peg$c247;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c248); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c249();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c250) {
                      s1 = peg$c250;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c251); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c252();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c253) {
                        s1 = peg$c253;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c254); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c255();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c256) {
                          s1 = peg$c256;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c257); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c258();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c259) {
                            s1 = peg$c259;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c260); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c261();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c262) {
                              s1 = peg$c262;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c263); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c264();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 2) === peg$c156) {
                                s1 = peg$c156;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c157); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c265();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c266) {
                                  s1 = peg$c266;
                                  peg$currPos += 2;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c268();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 2) === peg$c269) {
                                    s1 = peg$c269;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c270); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c271();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c272) {
                                      s1 = peg$c272;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c273); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c274();
                                    }
                                    s0 = s1;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseconditional_ace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c224;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseconditional_ace_type();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c226;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c227); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseace_flag_string();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 59) {
                s5 = peg$c226;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c227); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseace_rights();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 59) {
                    s7 = peg$c226;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c227); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseguid();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 59) {
                        s9 = peg$c226;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c227); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseguid();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 59) {
                            s11 = peg$c226;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c227); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsesid_string();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 59) {
                                s13 = peg$c226;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c227); }
                              }
                              if (s13 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 40) {
                                  s14 = peg$c224;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                }
                                if (s14 !== peg$FAILED) {
                                  s15 = peg$parsecond_expr();
                                  if (s15 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s16 = peg$c228;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 41) {
                                        s17 = peg$c228;
                                        peg$currPos++;
                                      } else {
                                        s17 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                      }
                                      if (s17 !== peg$FAILED) {
                                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17];
                                        s0 = s1;
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconditional_ace_type() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c259) {
        s0 = peg$c259;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c262) {
          s0 = peg$c262;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c263); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c272) {
            s0 = peg$c272;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c273); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c269) {
              s0 = peg$c269;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c270); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecentral_policy_ace() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c224;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c266) {
          s2 = peg$c266;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c267); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c226;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c227); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseace_flag_string();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c275) {
                s5 = peg$c275;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c276); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsecapid_value_sid();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c228;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c229); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecapid_value_sid() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c277) {
        s1 = peg$c277;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c278); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSubAuthority();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSubAuthority();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseresource_attribute_ace() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c224;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c225); }
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c156) {
          s2 = peg$c156;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c157); }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s3 = peg$c226;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c227); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseace_flag_string();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4) === peg$c275) {
                s5 = peg$c275;
                peg$currPos += 4;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c276); }
              }
              if (s5 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c75) {
                  s6 = peg$c75;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c76); }
                }
                if (s6 === peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c279) {
                    s6 = peg$c279;
                    peg$currPos += 7;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c280); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c281) {
                    s7 = peg$c281;
                    peg$currPos += 2;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c282); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseattribute_data();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c283) {
                        s9 = peg$c283;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c284); }
                      }
                      if (s9 !== peg$FAILED) {
                        s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDQUOTE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c285;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c286); }
      }

      return s0;
    }

    function peg$parseattribute_data() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseattr_char2();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseattr_char2();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c287;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseTI_attr();
              if (s5 === peg$FAILED) {
                s5 = peg$parseTU_attr();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseTS_attr();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parseTD_attr();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parseTX_attr();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseTB_attr();
                      }
                    }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTI_attr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c289) {
        s1 = peg$c289;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c290); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c287;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_flags();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c287;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseint_64();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c287;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c288); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseint_64();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTU_attr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c291) {
        s1 = peg$c291;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c292); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c287;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_flags();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c287;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseuint_64();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c287;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c288); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseuint_64();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTS_attr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c293) {
        s1 = peg$c293;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c294); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c287;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_flags();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c287;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsechar_string();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c287;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c288); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsechar_string();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTD_attr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c295) {
        s1 = peg$c295;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c287;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_flags();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c287;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsesid_string();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c287;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c288); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsesid_string();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTX_attr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c297) {
        s1 = peg$c297;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c298); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c287;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_flags();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c287;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseoctet_string();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c287;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c288); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseoctet_string();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseTB_attr() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c299) {
        s1 = peg$c299;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c300); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c287;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_flags();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c287;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c288); }
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 48) {
                s7 = peg$c301;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c302); }
              }
              if (s7 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 49) {
                  s7 = peg$c303;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c304); }
                }
              }
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 44) {
                s6 = peg$c287;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c288); }
              }
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 48) {
                  s7 = peg$c301;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c302); }
                }
                if (s7 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 49) {
                    s7 = peg$c303;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c304); }
                  }
                }
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_flags() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c305) {
        s1 = peg$c305;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHEXDIG_1_4();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c307) {
            s5 = peg$c307;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c308); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesys_attr_flags();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          if (input.charCodeAt(peg$currPos) === 48) {
            s4 = peg$c301;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c302); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (input.charCodeAt(peg$currPos) === 48) {
              s4 = peg$c301;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c302); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesys_attr_flags();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (input.charCodeAt(peg$currPos) === 48) {
              s4 = peg$c301;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c302); }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (input.charCodeAt(peg$currPos) === 48) {
                s4 = peg$c301;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c302); }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseHEXDIG();
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG() {
      var s0;

      if (peg$c309.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c310); }
      }

      return s0;
    }

    function peg$parseHEXDIG_1_2() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c311(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG_1_4() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG_1_2();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_1_2();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c311(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG_1_8() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG_1_4();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_1_4();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c311(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG_1_12() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG_1_8();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_1_4();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c311(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG_4() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseHEXDIG();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseHEXDIG();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c312(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG_8() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG_4();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_4();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c313(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHEXDIG_12() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseHEXDIG_8();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_4();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c313(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesys_attr_flags() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 48) {
        s1 = peg$c301;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c302); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 49) {
          s1 = peg$c303;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c304); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 50) {
            s1 = peg$c314;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c315); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 51) {
              s1 = peg$c316;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c317); }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseace_flag_string() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseace_flag();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseace_flag_string();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$c318;
      }

      return s0;
    }

    function peg$parseace_flag() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c319) {
        s0 = peg$c319;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c320); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c321) {
          s0 = peg$c321;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c322); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c323) {
            s0 = peg$c323;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c324); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c325) {
              s0 = peg$c325;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c326); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c327) {
                s0 = peg$c327;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c328); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c99) {
                  s0 = peg$c99;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c100); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c329) {
                    s0 = peg$c329;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c330); }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseOCTDIG() {
      var s0;

      if (peg$c331.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c332); }
      }

      return s0;
    }

    function peg$parseDIGIT() {
      var s0;

      if (peg$c333.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c334); }
      }

      return s0;
    }

    function peg$parseace_rights() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c305) {
        s1 = peg$c305;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_1_8();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c335(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c301;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c302); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseOCTDIG();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseOCTDIG();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c336(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          s2 = peg$parseDIGIT();
          if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parseDIGIT();
            }
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c337(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parsetext_rights_string();
            while (s2 !== peg$FAILED) {
              s1.push(s2);
              s2 = peg$parsetext_rights_string();
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c338(s1);
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsetext_rights_string() {
      var s0;

      s0 = peg$parsegeneric_right();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestandard_right();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobject_specific_right();
        }
      }

      return s0;
    }

    function peg$parsegeneric_right() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c339) {
        s1 = peg$c339;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c340); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c341();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c342) {
          s1 = peg$c342;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c343); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c344();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c345) {
            s1 = peg$c345;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c346); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c347();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c348) {
              s1 = peg$c348;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c349); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c350();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsestandard_right() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c351) {
        s1 = peg$c351;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c352); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c353();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c75) {
          s1 = peg$c75;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c354();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c90) {
            s1 = peg$c90;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c91); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c355();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c356) {
              s1 = peg$c356;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c357); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c358();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parseobject_specific_right() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c359) {
        s1 = peg$c359;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c360); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c361();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c362) {
          s1 = peg$c362;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c363); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c364();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c365) {
            s1 = peg$c365;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c366); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c367();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c27) {
              s1 = peg$c27;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c368();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 2) === peg$c369) {
                s1 = peg$c369;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c370); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c371();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c372) {
                  s1 = peg$c372;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c373); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c374();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 2) === peg$c375) {
                    s1 = peg$c375;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c376); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c377();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c378) {
                      s1 = peg$c378;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c379); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c380();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 2) === peg$c381) {
                        s1 = peg$c381;
                        peg$currPos += 2;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c382); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c383();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 2) === peg$c90) {
                          s1 = peg$c90;
                          peg$currPos += 2;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c91); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c355();
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 2) === peg$c75) {
                            s1 = peg$c75;
                            peg$currPos += 2;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c76); }
                          }
                          if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c384();
                          }
                          s0 = s1;
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 2) === peg$c351) {
                              s1 = peg$c351;
                              peg$currPos += 2;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c352); }
                            }
                            if (s1 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c353();
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              if (input.substr(peg$currPos, 2) === peg$c356) {
                                s1 = peg$c356;
                                peg$currPos += 2;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c357); }
                              }
                              if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c358();
                              }
                              s0 = s1;
                              if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                if (input.substr(peg$currPos, 2) === peg$c339) {
                                  s1 = peg$c339;
                                  peg$currPos += 2;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c340); }
                                }
                                if (s1 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = peg$c385();
                                }
                                s0 = s1;
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  if (input.substr(peg$currPos, 2) === peg$c345) {
                                    s1 = peg$c345;
                                    peg$currPos += 2;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c346); }
                                  }
                                  if (s1 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c386();
                                  }
                                  s0 = s1;
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    if (input.substr(peg$currPos, 2) === peg$c342) {
                                      s1 = peg$c342;
                                      peg$currPos += 2;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c343); }
                                    }
                                    if (s1 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c387();
                                    }
                                    s0 = s1;
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      if (input.substr(peg$currPos, 2) === peg$c348) {
                                        s1 = peg$c348;
                                        peg$currPos += 2;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c349); }
                                      }
                                      if (s1 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c388();
                                      }
                                      s0 = s1;
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        if (input.substr(peg$currPos, 2) === peg$c329) {
                                          s1 = peg$c329;
                                          peg$currPos += 2;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c330); }
                                        }
                                        if (s1 !== peg$FAILED) {
                                          peg$savedPos = s0;
                                          s1 = peg$c389();
                                        }
                                        s0 = s1;
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          if (input.substr(peg$currPos, 2) === peg$c390) {
                                            s1 = peg$c390;
                                            peg$currPos += 2;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c391); }
                                          }
                                          if (s1 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c392();
                                          }
                                          s0 = s1;
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            if (input.substr(peg$currPos, 2) === peg$c393) {
                                              s1 = peg$c393;
                                              peg$currPos += 2;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c394); }
                                            }
                                            if (s1 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s1 = peg$c395();
                                            }
                                            s0 = s1;
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              if (input.substr(peg$currPos, 2) === peg$c396) {
                                                s1 = peg$c396;
                                                peg$currPos += 2;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c397); }
                                              }
                                              if (s1 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c398();
                                              }
                                              s0 = s1;
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                if (input.substr(peg$currPos, 2) === peg$c189) {
                                                  s1 = peg$c189;
                                                  peg$currPos += 2;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c190); }
                                                }
                                                if (s1 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s1 = peg$c399();
                                                }
                                                s0 = s1;
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.substr(peg$currPos, 2) === peg$c400) {
                                                    s1 = peg$c400;
                                                    peg$currPos += 2;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c401); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c402();
                                                  }
                                                  s0 = s1;
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    if (input.substr(peg$currPos, 2) === peg$c403) {
                                                      s1 = peg$c403;
                                                      peg$currPos += 2;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c404); }
                                                    }
                                                    if (s1 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c405();
                                                    }
                                                    s0 = s1;
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      if (input.substr(peg$currPos, 2) === peg$c406) {
                                                        s1 = peg$c406;
                                                        peg$currPos += 2;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c407); }
                                                      }
                                                      if (s1 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c408();
                                                      }
                                                      s0 = s1;
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        if (input.substr(peg$currPos, 2) === peg$c409) {
                                                          s1 = peg$c409;
                                                          peg$currPos += 2;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c410); }
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s1 = peg$c411();
                                                        }
                                                        s0 = s1;
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          if (input.substr(peg$currPos, 2) === peg$c412) {
                                                            s1 = peg$c412;
                                                            peg$currPos += 2;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c413); }
                                                          }
                                                          if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c414();
                                                          }
                                                          s0 = s1;
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            if (input.substr(peg$currPos, 2) === peg$c415) {
                                                              s1 = peg$c415;
                                                              peg$currPos += 2;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c416); }
                                                            }
                                                            if (s1 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s1 = peg$c417();
                                                            }
                                                            s0 = s1;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseguid() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$c318;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseHEXDIG_8();
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c418;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c419); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseHEXDIG_4();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s4 = peg$c418;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c419); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseHEXDIG_4();
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s6 = peg$c418;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c419); }
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseHEXDIG_4();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s8 = peg$c418;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c419); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parseHEXDIG_12();
                        if (s9 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsewspace() {
      var s0, s1;

      s0 = [];
      if (peg$c420.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c421); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c420.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c421); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseterm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsewspace();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsememberof_op();
        if (s2 === peg$FAILED) {
          s2 = peg$parseexists_op();
          if (s2 === peg$FAILED) {
            s2 = peg$parserel_op();
            if (s2 === peg$FAILED) {
              s2 = peg$parsecontains_op();
              if (s2 === peg$FAILED) {
                s2 = peg$parseanyof_op();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseattr_name();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parserel_op2();
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewspace();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecond_expr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$parseterm();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseterm();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewspace();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c422) {
              s3 = peg$c422;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c423); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c424) {
                s3 = peg$c424;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c425); }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsewspace();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsecond_expr();
                if (s5 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 33) {
            s1 = peg$c426;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c427); }
          }
          if (s1 === peg$FAILED) {
            s1 = null;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsewspace();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c224;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c225); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecond_expr();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c228;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c229); }
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsememberof_op() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c428) {
        s1 = peg$c428;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c429); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c430) {
          s1 = peg$c430;
          peg$currPos += 13;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c431); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c432) {
            s1 = peg$c432;
            peg$currPos += 13;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c433); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 17) === peg$c434) {
              s1 = peg$c434;
              peg$currPos += 17;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c435); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 16) === peg$c436) {
                s1 = peg$c436;
                peg$currPos += 16;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c437); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 20) === peg$c438) {
                  s1 = peg$c438;
                  peg$currPos += 20;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c439); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 20) === peg$c440) {
                    s1 = peg$c440;
                    peg$currPos += 20;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c441); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 24) === peg$c442) {
                      s1 = peg$c442;
                      peg$currPos += 24;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c443); }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesid_array();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseexists_op() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c444) {
        s1 = peg$c444;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c445); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 10) === peg$c446) {
          s1 = peg$c446;
          peg$currPos += 10;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c447); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattr_name();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserel_op() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseattr_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 60) {
            s3 = peg$c448;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c449); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c450) {
              s3 = peg$c450;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c451); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s3 = peg$c452;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c453); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c454) {
                  s3 = peg$c454;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c455); }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewspace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseattr_name2();
              if (s5 === peg$FAILED) {
                s5 = peg$parsevalue();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserel_op2() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseattr_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c456) {
            s3 = peg$c456;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c457); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c458) {
              s3 = peg$c458;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c459); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewspace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseattr_name2();
              if (s5 === peg$FAILED) {
                s5 = peg$parsevalue_array();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontains_op() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseattr_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 8) === peg$c460) {
            s3 = peg$c460;
            peg$currPos += 8;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c461); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 12) === peg$c462) {
              s3 = peg$c462;
              peg$currPos += 12;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c463); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewspace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseattr_name2();
              if (s5 === peg$FAILED) {
                s5 = peg$parsevalue_array();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseanyof_op() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseattr_name();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c464) {
            s3 = peg$c464;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c465); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c466) {
              s3 = peg$c466;
              peg$currPos += 10;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c467); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewspace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseattr_name2();
              if (s5 === peg$FAILED) {
                s5 = peg$parsevalue_array();
              }
              if (s5 !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_name1() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseattr_char1();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseattr_char1();
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 64) {
            s3 = peg$c468;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c469); }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseattr_char1();
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 64) {
              s3 = peg$c468;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c469); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseALPHA() {
      var s0;

      if (peg$c470.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c471); }
      }

      return s0;
    }

    function peg$parseattr_char1() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseALPHA();
      if (s1 === peg$FAILED) {
        s1 = peg$parseDIGIT();
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c472;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c473); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s1 = peg$c474;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c475); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 47) {
                s1 = peg$c476;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c477); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s1 = peg$c478;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c479); }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseALPHA();
          if (s1 === peg$FAILED) {
            s1 = peg$parseDIGIT();
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s1 = peg$c472;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c473); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s1 = peg$c474;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c475); }
                }
                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s1 = peg$c476;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c477); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 95) {
                      s1 = peg$c478;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c479); }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_name2() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c480) {
        s1 = peg$c480;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c481); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c482) {
          s1 = peg$c482;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c483); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c484) {
            s1 = peg$c484;
            peg$currPos += 10;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c485); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseattr_char2();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseattr_char2();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattr_char2() {
      var s0;

      s0 = peg$parseattr_char1();
      if (s0 === peg$FAILED) {
        s0 = peg$parselit_char();
      }

      return s0;
    }

    function peg$parseattr_name() {
      var s0;

      s0 = peg$parseattr_name1();
      if (s0 === peg$FAILED) {
        s0 = peg$parseattr_name2();
      }

      return s0;
    }

    function peg$parsesid_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parseliteral_SID();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c486;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c487); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewspace();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseliteral_SID();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsewspace();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c287;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c288); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsewspace();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseliteral_SID();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsewspace();
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c287;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c288); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewspace();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseliteral_SID();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsewspace();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s7 = [s7, s8, s9, s10];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s6 = peg$c488;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c489); }
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseliteral_SID() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c490) {
        s1 = peg$c490;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c491); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesid_string();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c228;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c229); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalue_array() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsevalue();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewspace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c486;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c487); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsewspace();
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsevalue();
            if (s3 !== peg$FAILED) {
              s4 = peg$parsewspace();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c287;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c288); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsewspace();
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsevalue();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsewspace();
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c287;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c288); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parsewspace();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsevalue();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parsewspace();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s7 = [s7, s8, s9, s10];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s6 = peg$c488;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c489); }
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsevalue() {
      var s0;

      s0 = peg$parseint_64();
      if (s0 === peg$FAILED) {
        s0 = peg$parsechar_string();
        if (s0 === peg$FAILED) {
          s0 = peg$parseoctet_string();
        }
      }

      return s0;
    }

    function peg$parseint_64() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c492;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c493); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c418;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c419); }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c305) {
          s3 = peg$c305;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c306); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseHEXDIG();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseHEXDIG();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c301;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c302); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseOCTDIG();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseOCTDIG();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = [];
          s1 = peg$parseDIGIT();
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              s1 = peg$parseDIGIT();
            }
          } else {
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseuint_64() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c305) {
        s1 = peg$c305;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseHEXDIG();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseHEXDIG();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c301;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c302); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseOCTDIG();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseOCTDIG();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = [];
          s1 = peg$parseDIGIT();
          if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
              s0.push(s1);
              s1 = peg$parseDIGIT();
            }
          } else {
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parseCHAR() {
      var s0;

      if (peg$c494.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c495); }
      }

      return s0;
    }

    function peg$parsechar_string() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseDQUOTE();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseCHAR();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseCHAR();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseDQUOTE();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseoctet_string() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c496;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c497); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseHEXDIG();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHEXDIG();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseHEXDIG();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseHEXDIG();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselit_char() {
      var s0, s1, s2;

      if (input.charCodeAt(peg$currPos) === 35) {
        s0 = peg$c496;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c497); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 36) {
          s0 = peg$c498;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c499); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s0 = peg$c500;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c501); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 42) {
              s0 = peg$c502;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c503); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s0 = peg$c492;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c493); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s0 = peg$c418;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c419); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s0 = peg$c474;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c475); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s0 = peg$c476;
                      peg$currPos++;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c477); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s0 = peg$c472;
                        peg$currPos++;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c473); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 59) {
                          s0 = peg$c226;
                          peg$currPos++;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c227); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 63) {
                            s0 = peg$c504;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c505); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 64) {
                              s0 = peg$c468;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c469); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 91) {
                                s0 = peg$c506;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c507); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 92) {
                                  s0 = peg$c508;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c509); }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 93) {
                                    s0 = peg$c510;
                                    peg$currPos++;
                                  } else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c511); }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 94) {
                                      s0 = peg$c512;
                                      peg$currPos++;
                                    } else {
                                      s0 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c513); }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (input.charCodeAt(peg$currPos) === 95) {
                                        s0 = peg$c478;
                                        peg$currPos++;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c479); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 96) {
                                          s0 = peg$c514;
                                          peg$currPos++;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c515); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.charCodeAt(peg$currPos) === 123) {
                                            s0 = peg$c486;
                                            peg$currPos++;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c487); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 125) {
                                              s0 = peg$c488;
                                              peg$currPos++;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c489); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 126) {
                                                s0 = peg$c516;
                                                peg$currPos++;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c517); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (peg$c518.test(input.charAt(peg$currPos))) {
                                                  s0 = input.charAt(peg$currPos);
                                                  peg$currPos++;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c519); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  if (input.charCodeAt(peg$currPos) === 37) {
                                                    s1 = peg$c520;
                                                    peg$currPos++;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c521); }
                                                  }
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseHEXDIG_4();
                                                    if (s2 !== peg$FAILED) {
                                                      s1 = [s1, s2];
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseSID() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c522) {
        s1 = peg$c522;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c523); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseIdentifierAuthority();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseSubAuthority();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseSubAuthority();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c524(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifierAuthority() {
      var s0;

      s0 = peg$parseDIGIT_1_10();
      if (s0 === peg$FAILED) {
        s0 = peg$parseIdentifierAuthorityHex();
      }

      return s0;
    }

    function peg$parseDIGIT_1_2() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDIGIT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c525(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDIGIT_1_4() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDIGIT_1_2();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT_1_2();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c525(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDIGIT_1_8() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDIGIT_1_4();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT_1_4();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c525(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseDIGIT_1_10() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseDIGIT_1_8();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT_1_2();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c525(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseIdentifierAuthorityHex() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c305) {
        s1 = peg$c305;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c306); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseHEXDIG_12();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSubAuthority() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c418;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c419); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT_1_10();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c526(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  root.sddlParser = {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})(this);
